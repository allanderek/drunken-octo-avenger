// Generated by CoffeeScript 1.9.0
(function() {
  var countLiberties, enemyColor, go_rules, neighboringPoints, tesuji_charm;

  if (window.tesuji_charm == null) {
    window.tesuji_charm = {};
  }

  tesuji_charm = window.tesuji_charm;

  if (tesuji_charm.go_rules == null) {
    tesuji_charm.go_rules = {};
  }

  go_rules = tesuji_charm.go_rules;

  go_rules.isLegal = function(color, x, y, state) {
    return state[y][x] === 'empty';
  };

  go_rules.getNewState = function(color, x, y, state) {
    var newState, xn, yn, _i, _len, _ref, _ref1;
    newState = $.extend(true, [], state);
    newState[y][x] = color;
    _ref = neighboringPoints(x, y, newState);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], xn = _ref1[0], yn = _ref1[1];
      if (newState[yn][xn] === enemyColor(color)) {
        if (countLiberties(xn, yn, newState) === 0) {
          newState[yn][xn] = 'empty';
        }
      }
    }
    return newState;
  };

  neighboringPoints = function(x, y, state) {
    var x0, y0, _i, _len, _ref, _ref1, _results;
    _ref = [[x, y - 1], [x + 1, y], [x, y + 1], [x - 1, y]];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], x0 = _ref1[0], y0 = _ref1[1];
      if (state[y0] !== void 0 && state[y0][x0] !== void 0) {
        _results.push([x0, y0]);
      }
    }
    return _results;
  };

  go_rules._neighbouringPoints = neighboringPoints;

  enemyColor = function(color) {
    switch (color) {
      case 'black':
        return 'white';
      case 'white':
        return 'black';
      default:
        throw Error(color + " has no enemy color");
    }
  };

  countLiberties = function(x, y, state) {
    var count, xn, yn, _i, _len, _ref, _ref1;
    count = 0;
    _ref = neighboringPoints(x, y, state);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      _ref1 = _ref[_i], xn = _ref1[0], yn = _ref1[1];
      if (state[yn][xn] === 'empty') {
        count += 1;
      }
    }
    return count;
  };

  go_rules._countLiberties = countLiberties;

}).call(this);
