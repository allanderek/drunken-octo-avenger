// Generated by CoffeeScript 1.9.1
(function() {
  var $pointAt, colRe, colorFromDom, game_common, go_rules, hasCoordClass, parseCoordClass, readBoardState, rowRe, setImage, setPointColor, setStoneClass, smartgame, tesuji_charm, updateBoard;

  if (window.tesuji_charm == null) {
    window.tesuji_charm = {};
  }

  tesuji_charm = window.tesuji_charm;

  if (tesuji_charm.game_common == null) {
    tesuji_charm.game_common = {};
  }

  game_common = tesuji_charm.game_common;

  smartgame = tesuji_charm.smartgame;

  go_rules = tesuji_charm.go_rules;

  game_common.$pointAt = $pointAt = function(x, y) {
    return $(".row-" + y + ".col-" + x);
  };

  game_common.setPointColor = setPointColor = function($td, color) {
    var filename, ref, stoneclass;
    ref = (function() {
      switch (color) {
        case 'empty':
          return ['e.gif', 'nostone'];
        case 'black':
          return ['b.gif', 'blackstone'];
        case 'white':
          return ['w.gif', 'whitestone'];
        case 'blackdead':
          return ['bdwp.gif', 'blackdead whitescore'];
        case 'whitedead':
          return ['wdbp.gif', 'whitedead blackscore'];
        case 'blackscore':
          return ['bp.gif', 'blackscore nostone'];
        case 'whitescore':
          return ['wp.gif', 'whitescore nostone'];
      }
    })(), filename = ref[0], stoneclass = ref[1];
    setImage($td, filename);
    return setStoneClass($td, stoneclass);
  };

  setImage = function($td, filename) {
    return $td.find('img').attr('src', "/static/images/goban/" + filename);
  };

  setStoneClass = function($td, stoneclass) {
    return $td.removeClass('blackstone whitestone nostone blackdead whitedead blackscore whitescore').addClass(stoneclass);
  };

  game_common.colorFromDom = colorFromDom = function($point) {
    "return the color of the given point based on the DOM status";
    if ($point.hasClass('blackstone')) {
      return 'black';
    }
    if ($point.hasClass('whitestone')) {
      return 'white';
    }
    if ($point.hasClass('blackdead')) {
      return 'blackdead';
    }
    if ($point.hasClass('whitedead')) {
      return 'whitedead';
    }
    return 'empty';
  };

  rowRe = /row-(\d+)/;

  colRe = /col-(\d+)/;

  game_common.hasCoordClass = hasCoordClass = function($obj) {
    var classStr;
    classStr = $obj.attr("class");
    return rowRe.test(classStr) && colRe.test(classStr);
  };

  game_common.parseCoordClass = parseCoordClass = function($obj) {
    var _, classStr, colStr, ref, ref1, rowStr;
    classStr = $obj.attr("class");
    ref = rowRe.exec(classStr), _ = ref[0], rowStr = ref[1];
    ref1 = colRe.exec(classStr), _ = ref1[0], colStr = ref1[1];
    return [parseInt(rowStr, 10), parseInt(colStr, 10)];
  };

  game_common.readBoardState = readBoardState = function() {
    "generate a board state object based on the loaded page contents";
    var result;
    result = [];
    $('.goban td').each(function() {
      var $this, col, ref, row;
      $this = $(this);
      ref = parseCoordClass($this), row = ref[0], col = ref[1];
      if (result[row] == null) {
        result[row] = [];
      }
      return result[row][col] = colorFromDom($this);
    });
    return result;
  };

  game_common.updateBoard = updateBoard = function(state) {
    "set the images and classes of the DOM board to match the given state";
    var col, color, k, l, len, len1, row, rowArray;
    for (row = k = 0, len = state.length; k < len; row = ++k) {
      rowArray = state[row];
      for (col = l = 0, len1 = rowArray.length; l < len1; col = ++l) {
        color = rowArray[col];
        setPointColor($pointAt(col, row), color);
      }
    }
  };

  game_common.initialize = function() {
    var $td, $tr, board_state, i, j, k, l, len, m, node, ref, sgf_object, x, y;
    $('.goban').remove();
    $('#content').append('<table class="goban"></table>');
    for (j = k = 0; k <= 18; j = ++k) {
      $tr = $('<tr/>');
      $('.goban').append($tr);
      for (i = l = 0; l <= 18; i = ++l) {
        $td = $("<td class='row-" + j + " col-" + i + " nostone' />");
        $tr.append($td);
      }
    }
    if ($('input#data').val() !== '') {
      sgf_object = smartgame.parse($('input#data').val());
      board_state = (function() {
        var m, results;
        results = [];
        for (j = m = 0; m <= 18; j = ++m) {
          results.push((function() {
            var n, results1;
            results1 = [];
            for (i = n = 0; n <= 18; i = ++n) {
              results1.push('empty');
            }
            return results1;
          })());
        }
        return results;
      })();
      ref = sgf_object.gameTrees[0].nodes;
      for (m = 0, len = ref.length; m < len; m++) {
        node = ref[m];
        if (node.B) {
          x = node.B.charCodeAt(0) - 'a'.charCodeAt(0);
          y = node.B.charCodeAt(1) - 'a'.charCodeAt(0);
          board_state = go_rules.getNewState('black', x, y, board_state);
        }
        if (node.W) {
          x = node.W.charCodeAt(0) - 'a'.charCodeAt(0);
          y = node.W.charCodeAt(1) - 'a'.charCodeAt(0);
          board_state = go_rules.getNewState('white', x, y, board_state);
        }
      }
      updateBoard(board_state);
    }
  };

}).call(this);
