// Generated by CoffeeScript 1.9.1
(function() {
  var $pointAt, colRe, game_common, getStoneColor, hasCoordClass, parseCoordClass, readBoardState, rowRe, setImage, setPointColor, setStoneClass, tesuji_charm, updateBoard, updateBoardChars;

  if (window.tesuji_charm == null) {
    window.tesuji_charm = {};
  }

  tesuji_charm = window.tesuji_charm;

  if (tesuji_charm.game_common == null) {
    tesuji_charm.game_common = {};
  }

  game_common = tesuji_charm.game_common;

  game_common.$pointAt = $pointAt = function(x, y) {
    return $(".row-" + y + ".col-" + x);
  };

  game_common.setPointColor = setPointColor = function($td, color) {
    var filename, ref, stoneclass;
    ref = (function() {
      switch (color) {
        case 'empty':
          return ['e.gif', 'nostone'];
        case 'black':
          return ['b.gif', 'blackstone'];
        case 'white':
          return ['w.gif', 'whitestone'];
        case 'blackdead':
          return ['bdwp.gif', 'blackdead whitescore'];
        case 'whitedead':
          return ['wdbp.gif', 'whitedead blackscore'];
        case 'blackscore':
          return ['bp.gif', 'blackscore nostone'];
        case 'whitescore':
          return ['wp.gif', 'whitescore nostone'];
      }
    })(), filename = ref[0], stoneclass = ref[1];
    setImage($td, filename);
    return setStoneClass($td, stoneclass);
  };

  setImage = function($td, filename) {
    return $td.find('img').attr('src', "/static/images/goban/" + filename);
  };

  setStoneClass = function($td, stoneclass) {
    return $td.removeClass('blackstone whitestone nostone blackdead whitedead blackscore whitescore').addClass(stoneclass);
  };

  rowRe = /row-(\d+)/;

  colRe = /col-(\d+)/;

  game_common.hasCoordClass = hasCoordClass = function($obj) {
    var classStr;
    classStr = $obj.attr("class");
    return rowRe.test(classStr) && colRe.test(classStr);
  };

  game_common.parseCoordClass = parseCoordClass = function($obj) {
    var _, classStr, colStr, ref, ref1, rowStr;
    classStr = $obj.attr("class");
    ref = rowRe.exec(classStr), _ = ref[0], rowStr = ref[1];
    ref1 = colRe.exec(classStr), _ = ref1[0], colStr = ref1[1];
    return [parseInt(rowStr, 10), parseInt(colStr, 10)];
  };

  game_common.readBoardState = readBoardState = function() {
    "generate a board state object based on the loaded page contents";
    var result;
    result = [];
    $('.goban td').each(function() {
      var $this, col, ref, row;
      $this = $(this);
      ref = parseCoordClass($this), row = ref[0], col = ref[1];
      if (result[row] == null) {
        result[row] = [];
      }
      return result[row][col] = getStoneColor($this);
    });
    return result;
  };

  getStoneColor = function($point) {
    if ($point.hasClass('blackstone')) {
      return 'black';
    }
    if ($point.hasClass('whitestone')) {
      return 'white';
    }
    if ($point.hasClass('blackdead')) {
      return 'blackdead';
    }
    if ($point.hasClass('whitedead')) {
      return 'whitedead';
    }
    return 'empty';
  };

  game_common.updateBoard = updateBoard = function(state) {
    "set the images and classes of the DOM board to match the given state";
    var col, color, i, j, len, len1, row, rowArray;
    for (row = i = 0, len = state.length; i < len; row = ++i) {
      rowArray = state[row];
      for (col = j = 0, len1 = rowArray.length; j < len1; col = ++j) {
        color = rowArray[col];
        setPointColor($pointAt(col, row), color);
      }
    }
  };

  updateBoardChars = function(charArray) {
    var char, col, color, i, j, len, len1, row, rowString;
    for (row = i = 0, len = charArray.length; i < len; row = ++i) {
      rowString = charArray[row];
      for (col = j = 0, len1 = rowString.length; j < len1; col = ++j) {
        char = rowString[col];
        color = (function() {
          switch (char) {
            case "b":
              return "black";
            case "w":
              return "white";
            case ".":
              return "empty";
          }
        })();
        setPointColor($pointAt(col, row), color);
      }
    }
  };

  game_common._updateBoardChars = updateBoardChars;

}).call(this);
