// Generated by CoffeeScript 1.9.1
(function() {
  var $pointAt, colRe, game_common, getStoneClass, hasCoordClass, parseCoordClass, readBoardState, rowRe, setImage, setPointColor, setStoneClass, tesuji_charm, updateBoard, updateBoardChars;

  if (window.tesuji_charm == null) {
    window.tesuji_charm = {};
  }

  tesuji_charm = window.tesuji_charm;

  if (tesuji_charm.game_common == null) {
    tesuji_charm.game_common = {};
  }

  game_common = tesuji_charm.game_common;

  setImage = function($td, filename) {
    return $td.find('img').attr('src', "/static/images/goban/" + filename);
  };

  setStoneClass = function($td, stoneclass) {
    return $td.removeClass('blackstone whitestone nostone blackdead whitedead blackscore whitescore').addClass(stoneclass);
  };

  setPointColor = function($td, color) {
    var filename, ref, stoneclass;
    ref = (function() {
      switch (color) {
        case 'empty':
          return ['e.gif', 'nostone'];
        case 'black':
          return ['b.gif', 'blackstone'];
        case 'white':
          return ['w.gif', 'whitestone'];
        case 'blackdead':
          return ['bdwp.gif', 'blackdead whitescore'];
        case 'whitedead':
          return ['wdbp.gif', 'whitedead blackscore'];
        case 'blackscore':
          return ['bp.gif', 'blackscore nostone'];
        case 'whitescore':
          return ['wp.gif', 'whitescore nostone'];
      }
    })(), filename = ref[0], stoneclass = ref[1];
    setImage($td, filename);
    return setStoneClass($td, stoneclass);
  };

  game_common.setPointColor = setPointColor;

  $pointAt = function(x, y) {
    return $(".row-" + y + ".col-" + x);
  };

  game_common.$pointAt = $pointAt;

  rowRe = /row-(\d+)/;

  colRe = /col-(\d+)/;

  hasCoordClass = function($obj) {
    var classStr;
    classStr = $obj.attr("class");
    return rowRe.test(classStr) && colRe.test(classStr);
  };

  game_common.hasCoordClass = hasCoordClass;

  parseCoordClass = function($obj) {
    var _, classStr, colStr, ref, ref1, rowStr;
    classStr = $obj.attr("class");
    ref = rowRe.exec($obj.attr("class")), _ = ref[0], rowStr = ref[1];
    ref1 = colRe.exec($obj.attr("class")), _ = ref1[0], colStr = ref1[1];
    return [parseInt(rowStr, 10), parseInt(colStr, 10)];
  };

  game_common.parseCoordClass = parseCoordClass;

  getStoneClass = function($obj) {
    var classStr;
    classStr = $obj.attr("class");
    if (classStr.indexOf('blackstone') > -1) {
      return 'blackstone';
    }
    if (classStr.indexOf('whitestone') > -1) {
      return 'whitestone';
    }
    return '';
  };

  readBoardState = function() {
    var result;
    result = [];
    $('.goban td').each(function(index) {
      var col, ref, row;
      ref = parseCoordClass($(this)), row = ref[0], col = ref[1];
      if (result[row] == null) {
        result[row] = [];
      }
      return result[row][col] = (function() {
        switch (getStoneClass($(this))) {
          case 'blackstone':
            return 'black';
          case 'whitestone':
            return 'white';
          default:
            return 'empty';
        }
      }).call(this);
    });
    return result;
  };

  game_common.readBoardState = readBoardState;

  updateBoard = function(state) {
    var $td, col, data, results, row, rowArray;
    results = [];
    for (row in state) {
      rowArray = state[row];
      results.push((function() {
        var results1;
        results1 = [];
        for (col in rowArray) {
          data = rowArray[col];
          $td = $pointAt(col, row);
          results1.push(setPointColor($td, data));
        }
        return results1;
      })());
    }
    return results;
  };

  game_common.updateBoard = updateBoard;

  updateBoardChars = function(charArray) {
    var $td, char, col, color, results, row, rowString;
    results = [];
    for (row in charArray) {
      rowString = charArray[row];
      results.push((function() {
        var results1;
        results1 = [];
        for (col in rowString) {
          char = rowString[col];
          color = (function() {
            switch (char) {
              case "b":
                return "black";
              case "w":
                return "white";
              case ".":
                return "empty";
            }
          })();
          $td = $pointAt(col, row);
          results1.push(setPointColor($td, color));
        }
        return results1;
      })());
    }
    return results;
  };

  game_common._updateBoardChars = updateBoardChars;

}).call(this);
