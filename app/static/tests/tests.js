// Generated by CoffeeScript 1.9.0
(function() {
  var go_rules;

  module('Persona');

  test('init function sets request and logout callbacks', function() {
    var logout_called, mock_navigator, request_called, watch_called;
    request_called = false;
    logout_called = false;
    watch_called = false;
    mock_navigator = {
      id: {
        logout: function() {
          return logout_called = true;
        },
        request: function() {
          return request_called = true;
        },
        watch: function(params) {
          var p_user, t_user;
          p_user = params.loggedInUser;
          t_user = tesuji_charm.current_persona_email;
          ok((t_user === '' && p_user === null) || (t_user !== '' && p_user === t_user), 'navigator.id.watch passed good loggedInUser');
          ok(typeof params.onlogin === 'function', 'navigator.id.watch passed function for onlogin');
          ok(typeof params.onlogout === 'function', 'navigator.id.watch passed function for onlogout');
          return watch_called = true;
        }
      }
    };
    equal(watch_called, false);
    tesuji_charm.current_persona_email = '';
    tesuji_charm.persona.initialize(mock_navigator);
    equal(watch_called, true, 'navigator.id.watch called');
    tesuji_charm.current_persona_email = 'bob@example.com';
    tesuji_charm.persona.initialize(mock_navigator);
    equal(request_called, false);
    equal(logout_called, false);
    $('#persona_login').click();
    equal(request_called, true, 'login request called correctly');
    equal(logout_called, false);
    $('#logout').click();
    return equal(logout_called, true, 'logout callback called correctly');
  });

  module('Basic game page', {
    setup: function() {
      $('input#move_no').val("0");
      $('input#row').val("");
      $('input#column').val("");
      return tesuji_charm.game_basic.initialize();
    }
  });

  test('clicking multiple points moves black stone', function() {
    var $img1, $img2, $point1, $point2;
    $point1 = $('td.row-0.col-0').first();
    $img1 = $point1.find('img').first();
    $point2 = $('td.row-2.col-1').first();
    $img2 = $point2.find('img').first();
    ok($img1.attr('src').indexOf('e.gif') > -1, 'first point is initially empty (e.gif)');
    $point1.click();
    ok($img1.attr('src').indexOf('e.gif') === -1, 'after click, no longer empty');
    ok($img1.attr('src').indexOf('b.gif') > -1, 'after click, contains b.gif');
    $point2.click();
    ok($img1.attr('src').indexOf('e.gif') > -1, 'after second click, first clicked point clear');
    return ok($img2.attr('src').indexOf('b.gif') > -1, 'after second click, second clicked point black');
  });

  test('clicking multiple points updates hidden form', function() {
    var $column, $point1, $point2, $row;
    $point1 = $('td.row-0.col-0').first();
    $point2 = $('td.row-2.col-1').first();
    $row = $('input#row');
    $column = $('input#column');
    $point1.click();
    equal($row.val(), "0", "first stone sets correct row");
    equal($column.val(), "0", "first stone sets correct column");
    $point2.click();
    equal($row.val(), "2", "second stone sets correct row");
    return equal($column.val(), "1", "second stone sets correct column");
  });

  test('Confirm button disabled until stone placed', function() {
    var $button;
    $button = $('button.confirm_button');
    equal($button.prop('disabled'), true, 'starts out disabled');
    $('table.goban td').first().click();
    return equal($button.prop('disabled'), false, 'enabled after stone placed');
  });

  test("clicking a pre-existing stone does nothing", function(assert) {
    var $img, $point;
    $point = $('.row-1.col-1');
    $img = $point.find('img');
    $point.addClass('whitestone');
    tesuji_charm.game_basic._reload_board();
    $point.click();
    assert.ok($img.attr('src').indexOf('b.gif') === -1, "point has not become black");
    assert.notEqual($('input#row').val(), "1", "row not set");
    return assert.notEqual($('input#column').val(), "1", "column not set");
  });

  test("captured stones are removed from the board", function(assert) {
    $('.row-0.col-1').addClass("blackstone");
    $('.row-0.col-1 img').attr('src', '/static/images/goban/b.gif');
    $('.row-0.col-0').addClass("whitestone");
    $('.row-0.col-0 img').attr('src', '/static/images/goban/w.gif');
    tesuji_charm.game_basic._reload_board();
    $('.row-1.col-0').click();
    return assert.ok($('.row-0.col-0 img').attr('src').indexOf('e.gif') > -1, "" + ($('.row-0.col-0 img').attr('src')));
  });

  test("helper function read_board_state", function(assert) {
    var expected;
    $('.row-0.col-1').addClass("blackstone");
    $('.row-0.col-0').addClass("whitestone");
    expected = [['white', 'black', 'empty'], ['empty', 'empty', 'empty'], ['empty', 'empty', 'empty']];
    return assert.deepEqual(tesuji_charm.game_basic._read_board_state(), expected);
  });

  test("helper function update_board", function(assert) {
    tesuji_charm.game_basic._update_board([['empty', 'black', 'empty'], ['black', 'white', 'empty'], ['empty', 'black', 'empty']]);
    assert.ok($('.row-0.col-1 img').attr('src').indexOf('b.gif') > -1);
    assert.ok($('.row-1.col-1 img').attr('src').indexOf('w.gif') > -1);
    assert.ok($('.row-1.col-2 img').attr('src').indexOf('e.gif') > -1);
    tesuji_charm.game_basic._update_board([['empty', 'empty', 'empty'], ['empty', 'empty', 'empty'], ['empty', 'empty', 'empty']]);
    assert.ok($('.row-0.col-1 img').attr('src').indexOf('e.gif') > -1);
    return assert.ok($('.row-1.col-1 img').attr('src').indexOf('e.gif') > -1);
  });

  module('Go rules');

  go_rules = tesuji_charm.go_rules;

  test("playing on an existing stone is illegal", function(assert) {
    var board;
    board = [['empty', 'black'], ['empty', 'empty']];
    assert.equal(go_rules.is_legal('white', 0, 1, board), true);
    return assert.equal(go_rules.is_legal('white', 1, 0, board), false);
  });

  test("playing a move sets the point color", function(assert) {
    var board, plusBlack, plusWhite;
    board = [['empty', 'black'], ['empty', 'empty']];
    plusBlack = [['empty', 'black'], ['black', 'empty']];
    plusWhite = [['empty', 'black'], ['white', 'empty']];
    assert.deepEqual(tesuji_charm.go_rules.get_new_state('black', 0, 1, board), plusBlack);
    return assert.deepEqual(tesuji_charm.go_rules.get_new_state('white', 0, 1, board), plusWhite);
  });

}).call(this);
