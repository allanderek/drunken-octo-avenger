// Generated by CoffeeScript 1.9.0
(function() {
  module('Persona');

  test('init function sets request and logout callbacks', function() {
    var logout_called, mock_navigator, request_called, watch_called;
    request_called = false;
    logout_called = false;
    watch_called = false;
    mock_navigator = {
      id: {
        logout: function() {
          return logout_called = true;
        },
        request: function() {
          return request_called = true;
        },
        watch: function(params) {
          var p_user, t_user;
          p_user = params.loggedInUser;
          t_user = tesuji_charm.current_persona_email;
          ok((t_user === '' && p_user === null) || (t_user !== '' && p_user === t_user), 'navigator.id.watch passed good loggedInUser');
          ok(typeof params.onlogin === 'function', 'navigator.id.watch passed function for onlogin');
          ok(typeof params.onlogout === 'function', 'navigator.id.watch passed function for onlogout');
          return watch_called = true;
        }
      }
    };
    equal(watch_called, false);
    tesuji_charm.current_persona_email = '';
    tesuji_charm.persona.initialize(mock_navigator);
    equal(watch_called, true, 'navigator.id.watch called');
    tesuji_charm.current_persona_email = 'bob@example.com';
    tesuji_charm.persona.initialize(mock_navigator);
    equal(request_called, false);
    equal(logout_called, false);
    $('#persona_login').click();
    equal(request_called, true, 'login request called correctly');
    equal(logout_called, false);
    $('#logout').click();
    return equal(logout_called, true, 'logout callback called correctly');
  });

  module('Basic game page', {
    setup: function() {
      tesuji_charm.playstone_url = '/playstone';
      tesuji_charm.game_basic.initialize();
      return $('input#move_no').val("0");
    }
  });

  test('clicking multiple points moves black stone', function() {
    var $img1, $img2, $point1, $point2;
    $point1 = $('table.goban td').first();
    $img1 = $point1.find('img').first();
    $point2 = $point1.next();
    $img2 = $point2.find('img').first();
    ok($img1.attr('src').indexOf('e.gif') > -1, 'first point is initially empty (e.gif)');
    $point1.click();
    ok($img1.attr('src').indexOf('e.gif') === -1, 'after click, no longer empty');
    ok($img1.attr('src').indexOf('b.gif') > -1, 'after click, contains b.gif');
    $point2.click();
    ok($img1.attr('src').indexOf('e.gif') > -1, 'after second click, first clicked point clear');
    return ok($img2.attr('src').indexOf('b.gif') > -1, 'after second click, second clicked point black');
  });

  test('clicking multiple points updates hidden form', function() {
    var $column, $point1, $point2, $row;
    $point1 = $('table.goban td').first();
    $point2 = $point1.next();
    $row = $('input#row');
    $column = $('input#column');
    $point1.click();
    equal($row.val(), 0, "first stone sets correct row");
    equal($column.val(), 0, "first stone sets correct column");
    $point2.click();
    equal($row.val(), 0, "second stone sets correct row");
    return equal($column.val(), 1, "second stone sets correct column");
  });

  test('Confirm button disabled until stone placed', function() {
    var $button;
    $button = $('button.confirm_button');
    equal($button.prop('disabled'), true, 'starts out disabled');
    $('table.goban td').first().click();
    return equal($button.prop('disabled'), false, 'enabled after stone placed');
  });

}).call(this);
