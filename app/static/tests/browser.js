// Generated by CoffeeScript 1.9.1
(function() {
  var BrowserTest, ChallengeTest, GameInterfaceTest, LoginTest, PlaceStonesTest, StatusTest, challengeTest, clearGamesForPlayer, createGame, createLoginSession, defaultHost, gameInterfaceTest, host, loginTest, placeStonesTest, pointSelector, port, portString, serverUrl, statusTest,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  defaultHost = "http://localhost";

  host = casper.cli.options['host'] || defaultHost;

  port = casper.cli.options['port'] || (host === defaultHost ? "5000" : "80");

  portString = port === "80" || port === 80 ? "" : ":" + port;

  if (!((host.match(/localhost/)) || (host.match(/staging/)))) {
    casper.die("Server url contains neither 'localhost' nor 'staging', aborting");
  }

  serverUrl = "" + host + portString;

  casper.echo("Testing against server at " + serverUrl);

  BrowserTest = (function() {
    function BrowserTest() {
      this.assertStonePointCounts = bind(this.assertStonePointCounts, this);
      this.assertEmptyBoard = bind(this.assertEmptyBoard, this);
      this.getLastGameLink = bind(this.getLastGameLink, this);
      this.run = bind(this.run, this);
    }

    BrowserTest.prototype.run = function() {
      return casper.test.begin(this.description, this.num_tests, (function(_this) {
        return function(test) {
          casper.start();
          _this.test_body(test);
          return casper.then(function() {
            return test.done();
          });
        };
      })(this));
    };

    BrowserTest.prototype.assertNumGames = function(test, players_turn, players_wait) {
      return casper.thenOpen(serverUrl, function() {
        var game_counts;
        test.assertExists('#your_turn_games', "Status has a list of 'your turn' games");
        test.assertExists('#not_your_turn_games', "Status has a list of 'not your turn' games");
        game_counts = casper.evaluate(function() {
          var counts;
          counts = {
            'your_turn': $('#your_turn_games a').length,
            'not_your_turn': $('#not_your_turn_games a').length
          };
          return counts;
        });
        test.assertEqual(game_counts.your_turn, players_turn, 'Expected number of your-turn games');
        return test.assertEqual(game_counts.not_your_turn, players_wait, 'Expected number of not-your-turn games');
      });
    };

    BrowserTest.prototype.lastGameSelector = function(your_turn) {
      var list_id;
      list_id = your_turn ? 'your_turn_games' : 'not_your_turn_games';
      return '#' + list_id + ' li:last-child a';
    };

    BrowserTest.prototype.getLastGameLink = function(your_turn) {
      var evaluate_fun;
      evaluate_fun = function(selector) {
        var link;
        link = {
          target: $(selector).attr('href'),
          text: $(selector).text()
        };
        return link;
      };
      return casper.evaluate(evaluate_fun, this.lastGameSelector(your_turn));
    };

    BrowserTest.prototype.assertEmptyBoard = function(test) {
      return this.assertStonePointCounts(test, 19 * 19, 0, 0);
    };

    BrowserTest.prototype.assertPointIsBlack = function(test, x, y) {
      return test.assertExists(pointSelector(x, y) + ".blackstone", 'There is a black stone at the expected point');
    };

    BrowserTest.prototype.assertPointIsWhite = function(test, x, y) {
      return test.assertExists(pointSelector(x, y) + ".whitestone", 'There is a white stone at the expected point');
    };

    BrowserTest.prototype.assertPointIsEmpty = function(test, x, y) {
      return test.assertExists(pointSelector(x, y) + ".nostone", 'The specified point is empty as expected');
    };

    BrowserTest.prototype.countStonesAndPoints = function() {
      var counts;
      counts = casper.evaluate(function() {
        var blackStones, emptyStones, whiteStones;
        emptyStones = $('.goban .nostone').length;
        blackStones = $('.goban .blackstone').length;
        whiteStones = $('.goban .whitestone').length;
        counts = {
          'empty': emptyStones,
          'black': blackStones,
          'white': whiteStones
        };
        return counts;
      });
      return counts;
    };

    BrowserTest.prototype.assertStonePointCounts = function(test, nostone, black, white) {
      var counts;
      counts = this.countStonesAndPoints();
      test.assertEqual(counts.empty, nostone, 'Expected number of empty points');
      test.assertEqual(counts.black, black, 'Expected number of black stones');
      return test.assertEqual(counts.white, white, 'Expected number of white stones');
    };

    return BrowserTest;

  })();

  LoginTest = (function(superClass) {
    extend(LoginTest, superClass);

    function LoginTest() {
      return LoginTest.__super__.constructor.apply(this, arguments);
    }

    LoginTest.prototype.description = 'Test the login procedure';

    LoginTest.prototype.num_tests = 3;

    LoginTest.prototype.test_body = function(test) {
      casper.thenOpen(serverUrl, function() {
        return test.assertTitle('Go', 'The front page title is the one expected');
      });
      casper.thenClick('#persona_login');
      casper.waitForPopup(/persona/);
      casper.withPopup(/persona/, function() {
        test.assertTitleMatch(/Persona/i, 'Persona login popup has expected title');
        this.sendKeys('#authentication_email', 'test@mockmyid.com');
        return this.thenClick('button:enabled');
      });
      return casper.then(function() {
        return test.skip(1);
      });
    };

    return LoginTest;

  })(BrowserTest);

  loginTest = new LoginTest;

  loginTest.run();

  StatusTest = (function(superClass) {
    extend(StatusTest, superClass);

    function StatusTest() {
      this.test_body = bind(this.test_body, this);
      return StatusTest.__super__.constructor.apply(this, arguments);
    }

    StatusTest.prototype.description = 'Test the status listings';

    StatusTest.prototype.num_tests = 12;

    StatusTest.prototype.test_body = function(test) {
      var ONE_EMAIL, THREE_EMAIL, TWO_EMAIL, assertNumGames, i, len, p, ref;
      ONE_EMAIL = 'playa@uno.es';
      TWO_EMAIL = 'player@two.co.uk';
      THREE_EMAIL = 'plagxo@tri.eo';
      ref = [ONE_EMAIL, TWO_EMAIL, THREE_EMAIL];
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        clearGamesForPlayer(p);
      }
      createGame(ONE_EMAIL, TWO_EMAIL);
      createGame(ONE_EMAIL, THREE_EMAIL);
      createGame(THREE_EMAIL, ONE_EMAIL);
      assertNumGames = (function(_this) {
        return function(player, players_turn, players_wait) {
          createLoginSession(player);
          return _this.assertNumGames(test, players_turn, players_wait);
        };
      })(this);
      assertNumGames(ONE_EMAIL, 2, 1);
      assertNumGames(TWO_EMAIL, 0, 1);
      return assertNumGames(THREE_EMAIL, 1, 1);
    };

    return StatusTest;

  })(BrowserTest);

  statusTest = new StatusTest;

  statusTest.run();

  ChallengeTest = (function(superClass) {
    extend(ChallengeTest, superClass);

    function ChallengeTest() {
      this.test_body = bind(this.test_body, this);
      return ChallengeTest.__super__.constructor.apply(this, arguments);
    }

    ChallengeTest.prototype.description = "Tests the 'Challenge a player process";

    ChallengeTest.prototype.num_tests = 17;

    ChallengeTest.prototype.test_body = function(test) {
      var OCHI_EMAIL, SHINDOU_EMAIL, TOUYA_EMAIL, i, len, p, ref, shindous_game_link;
      SHINDOU_EMAIL = 'shindou@ki-in.jp';
      TOUYA_EMAIL = 'touya@ki-in.jp';
      OCHI_EMAIL = 'ochino1@ki-in.jp';
      ref = [SHINDOU_EMAIL, TOUYA_EMAIL, OCHI_EMAIL];
      for (i = 0, len = ref.length; i < len; i++) {
        p = ref[i];
        clearGamesForPlayer(p);
      }
      createLoginSession(SHINDOU_EMAIL);
      casper.thenOpen(serverUrl, (function(_this) {
        return function() {
          return _this.assertNumGames(test, 0, 0);
        };
      })(this));
      casper.thenClick('#challenge_link', function() {
        var form_values;
        form_values = {
          'input[name="opponent_email"]': TOUYA_EMAIL
        };
        return this.fillSelectors('form', form_values, true);
      });
      shindous_game_link = null;
      casper.thenOpen(serverUrl, (function(_this) {
        return function() {
          _this.assertNumGames(test, 0, 1);
          return shindous_game_link = _this.getLastGameLink(false);
        };
      })(this));
      createLoginSession(TOUYA_EMAIL);
      casper.thenOpen(serverUrl, (function(_this) {
        return function() {
          var touyas_game_link;
          _this.assertNumGames(test, 1, 0);
          touyas_game_link = _this.getLastGameLink(true);
          return test.assertEqual(shindous_game_link, touyas_game_link, "both players see the same game link (target & text)");
        };
      })(this));
      createLoginSession(OCHI_EMAIL);
      return casper.thenOpen(serverUrl, (function(_this) {
        return function() {
          return _this.assertNumGames(test, 0, 0);
        };
      })(this));
    };

    return ChallengeTest;

  })(BrowserTest);

  challengeTest = new ChallengeTest;

  challengeTest.run();

  PlaceStonesTest = (function(superClass) {
    extend(PlaceStonesTest, superClass);

    function PlaceStonesTest() {
      this.test_body = bind(this.test_body, this);
      return PlaceStonesTest.__super__.constructor.apply(this, arguments);
    }

    PlaceStonesTest.prototype.description = "Test Placing Stones";

    PlaceStonesTest.prototype.num_tests = 18;

    PlaceStonesTest.prototype.test_body = function(test) {
      var ONE_EMAIL, TWO_EMAIL, initialEmptyCount;
      ONE_EMAIL = 'player@one.com';
      TWO_EMAIL = 'playa@dos.es';
      clearGamesForPlayer(ONE_EMAIL);
      clearGamesForPlayer(TWO_EMAIL);
      createGame(ONE_EMAIL, TWO_EMAIL, ['.b.', 'bw.', '.b.']);
      initialEmptyCount = 19 * 19 - 4;
      createLoginSession(ONE_EMAIL);
      casper.thenOpen(serverUrl, (function(_this) {
        return function() {
          return _this.assertNumGames(test, 1, 0);
        };
      })(this));
      return casper.thenClick(this.lastGameSelector(true), (function(_this) {
        return function() {
          test.assertExists('table.goban', 'The Go board does exist.');
          _this.assertStonePointCounts(test, initialEmptyCount, 3, 1);
          test.assertDoesntExist('.confirm_button:enabled', 'no usable confirm button appears');
          _this.assertPointIsEmpty(test, 0, 0);
          _this.assertPointIsBlack(test, 1, 0);
          _this.assertPointIsEmpty(test, 2, 0);
          _this.assertPointIsBlack(test, 0, 1);
          _this.assertPointIsWhite(test, 1, 1);
          _this.assertPointIsEmpty(test, 2, 1);
          _this.assertPointIsEmpty(test, 0, 2);
          _this.assertPointIsBlack(test, 1, 2);
          return _this.assertPointIsEmpty(test, 2, 2);
        };
      })(this));
    };

    return PlaceStonesTest;

  })(BrowserTest);

  placeStonesTest = new PlaceStonesTest;

  placeStonesTest.run();

  GameInterfaceTest = (function(superClass) {
    extend(GameInterfaceTest, superClass);

    function GameInterfaceTest() {
      this.test_body = bind(this.test_body, this);
      return GameInterfaceTest.__super__.constructor.apply(this, arguments);
    }

    GameInterfaceTest.prototype.description = "Game interface";

    GameInterfaceTest.prototype.num_tests = 43;

    GameInterfaceTest.prototype.test_body = function(test) {
      var ONE_EMAIL, TWO_EMAIL, initialEmptyCount;
      ONE_EMAIL = 'player@one.com';
      TWO_EMAIL = 'playa@dos.es';
      clearGamesForPlayer(ONE_EMAIL);
      clearGamesForPlayer(TWO_EMAIL);
      createGame(ONE_EMAIL, TWO_EMAIL);
      createGame(ONE_EMAIL, TWO_EMAIL, ['wwb', 'b..']);
      initialEmptyCount = 19 * 19 - 4;
      createLoginSession(ONE_EMAIL);
      casper.thenOpen(serverUrl, (function(_this) {
        return function() {
          return _this.assertNumGames(test, 2, 0);
        };
      })(this));
      casper.thenClick(this.lastGameSelector(true), (function(_this) {
        return function() {
          test.assertExists('table.goban', 'The Go board does exist.');
          _this.assertStonePointCounts(test, initialEmptyCount, 2, 2);
          test.assertTrue(casper.evaluate(function() {
            var result;
            result = false;
            $.ajax($('table.goban img').attr('src'), {
              'async': false,
              'success': function() {
                return result = true;
              }
            });
            return result;
          }), 'an image on the board can be loaded');
          return test.assertDoesntExist('.confirm_button:enabled', 'no usable confirm button appears');
        };
      })(this));
      casper.thenClick(pointSelector(1, 1), (function(_this) {
        return function() {
          _this.assertStonePointCounts(test, initialEmptyCount + 1, 3, 0);
          return test.assertExists('.confirm_button:enabled');
        };
      })(this));
      casper.thenClick(pointSelector(15, 3), (function(_this) {
        return function() {
          _this.assertStonePointCounts(test, initialEmptyCount - 1, 3, 2);
          _this.assertPointIsEmpty(test, 1, 1);
          return _this.assertPointIsWhite(test, 1, 0);
        };
      })(this));
      casper.thenClick(pointSelector(1, 1), (function(_this) {
        return function() {
          return _this.assertStonePointCounts(test, initialEmptyCount + 1, 3, 0);
        };
      })(this));
      casper.thenClick('.confirm_button', (function(_this) {
        return function() {
          return _this.assertNumGames(test, 1, 1);
        };
      })(this));
      createLoginSession(TWO_EMAIL);
      casper.thenOpen(serverUrl, (function(_this) {
        return function() {
          return _this.assertNumGames(test, 1, 1);
        };
      })(this));
      casper.thenClick(this.lastGameSelector(true), (function(_this) {
        return function() {
          return _this.assertStonePointCounts(test, initialEmptyCount + 1, 3, 0);
        };
      })(this));
      casper.thenClick(pointSelector(1, 1), (function(_this) {
        return function() {
          return _this.assertStonePointCounts(test, initialEmptyCount + 1, 3, 0);
        };
      })(this));
      casper.thenClick(pointSelector(3, 3), (function(_this) {
        return function() {
          return _this.assertStonePointCounts(test, initialEmptyCount, 3, 1);
        };
      })(this));
      casper.thenClick('.confirm_button');
      return casper.thenClick('#not_your_turn_games li:first-child a', (function(_this) {
        return function() {
          test.assertExists('.goban', 'The Go board still exists.');
          return _this.assertEmptyBoard(test);
        };
      })(this));
    };

    return GameInterfaceTest;

  })(BrowserTest);

  gameInterfaceTest = new GameInterfaceTest;

  gameInterfaceTest.run();

  clearGamesForPlayer = function(email) {
    return casper.thenOpen(serverUrl + "/testing_clear_games_for_player", {
      method: 'post',
      data: {
        'email': email
      }
    });
  };

  createGame = function(black_email, white_email, stones) {
    if (stones == null) {
      stones = [];
    }
    return casper.thenOpen(serverUrl + "/testing_create_game", {
      method: 'post',
      data: {
        'black_email': black_email,
        'white_email': white_email,
        'stones': JSON.stringify(stones)
      }
    });
  };

  createLoginSession = function(email) {
    "Add steps to the stack to create a login session on the server and set its cookie in the browser.";
    casper.thenOpen(serverUrl + "/testing_create_login_session", {
      method: 'post',
      data: {
        'email': email
      }
    });
    return casper.then(function() {
      var content, name, path, ref, value;
      content = casper.getPageContent();
      ref = content.split('\n'), name = ref[0], value = ref[1], path = ref[2];
      casper.page.clearCookies();
      return casper.page.addCookie({
        'name': name,
        'value': value,
        'path': path
      });
    });
  };

  pointSelector = function(x, y) {
    return ".col-" + x + ".row-" + y;
  };

  casper.run(function() {
    casper.log("shutting down...");
    return casper.open('http://localhost:5000/shutdown', {
      method: 'post'
    });
  });

}).call(this);
