// Generated by CoffeeScript 1.9.1
(function() {
  var clearGamesForPlayer, createGame, createLoginSession, defaultHost, host, pointSelector, port, portString, serverUrl;

  defaultHost = "http://localhost";

  host = casper.cli.options['host'] || defaultHost;

  port = casper.cli.options['port'] || (host === defaultHost ? "5000" : "80");

  portString = port === "80" || port === 80 ? "" : ":" + port;

  if (!((host.match(/localhost/)) || (host.match(/staging/)))) {
    casper.die("Server url contains neither 'localhost' nor 'staging', aborting");
  }

  serverUrl = "" + host + portString;

  casper.echo("Testing against server at " + serverUrl);

  casper.test.begin('Test the login procedure', 3, function(test) {
    casper.start(serverUrl, function() {
      return test.assertTitle('Go', 'The front page title is the one expected');
    });
    casper.thenClick('#persona_login');
    casper.waitForPopup(/persona/);
    casper.withPopup(/persona/, function() {
      test.assertTitleMatch(/Persona/i, 'Persona login popup has expected title');
      this.sendKeys('#authentication_email', 'test@mockmyid.com');
      return this.thenClick('button:enabled');
    });
    casper.then(function() {
      return test.skip(1);
    });
    return casper.then(function() {
      return test.done();
    });
  });

  casper.test.begin("Tests the 'Challenge a player process", 8, function(test) {
    var OCHI_EMAIL, SHINDOU_EMAIL, TOUYA_EMAIL, i, len, p, ref, shindous_game_link, shindous_game_text;
    casper.start();
    SHINDOU_EMAIL = 'shindou@ki-in.jp';
    TOUYA_EMAIL = 'touya@ki-in.jp';
    OCHI_EMAIL = 'ochino1@ki-in.jp';
    ref = [SHINDOU_EMAIL, TOUYA_EMAIL, OCHI_EMAIL];
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      clearGamesForPlayer(p);
    }
    createLoginSession(SHINDOU_EMAIL);
    casper.thenOpen(serverUrl, function() {
      test.assertExists('#your_turn_games', "Status has a list of your turn games");
      return test.assertEqual(casper.evaluate(function() {
        return $('#your_turn_games a').length;
      }), 0, 'games are cleared so no games listed');
    });
    casper.thenClick('#challenge_link', function() {
      var form_values;
      form_values = {
        'input[name="opponent_email"]': TOUYA_EMAIL
      };
      return this.fillSelectors('form', form_values, true);
    });
    shindous_game_link = null;
    shindous_game_text = null;
    casper.thenOpen(serverUrl, function() {
      test.assertEqual(casper.evaluate(function() {
        return $('#not_your_turn_games a').length;
      }), 1);
      shindous_game_link = casper.evaluate(function() {
        return $('#not_your_turn_games li:last a').attr("href");
      });
      return shindous_game_text = casper.evaluate(function() {
        return $('#not_your_turn_games li:last a').text();
      });
    });
    createLoginSession(TOUYA_EMAIL);
    casper.thenOpen(serverUrl, function() {
      var touyas_game_link, touyas_game_text;
      test.assertEqual(casper.evaluate(function() {
        return $('#your_turn_games a').length;
      }), 1, 'Touya has the expected number of your turn games');
      touyas_game_link = casper.evaluate(function() {
        return $('#your_turn_games li:last a').attr("href");
      });
      touyas_game_text = casper.evaluate(function() {
        return $('#your_turn_games li:last a').text();
      });
      test.assertEqual(shindous_game_link, touyas_game_link, "both players see the same game link");
      return test.assertEqual(shindous_game_text, touyas_game_text, "both players see the same game text");
    });
    createLoginSession(OCHI_EMAIL);
    casper.thenOpen(serverUrl, function() {
      test.assertEqual(casper.evaluate(function() {
        return $('#your_turn_games a').length;
      }), 0, 'Ochi does not see any your turn games');
      return test.assertEqual(casper.evaluate(function() {
        return $('#not_your_turn_games a').length;
      }), 0, 'Ochi does not see any not your turn games');
    });
    return casper.then(function() {
      return test.done();
    });
  });

  casper.test.begin("Status Listings", 6, function(test) {
    var ONE_EMAIL, THREE_EMAIL, TWO_EMAIL, assertNumGames, i, len, p, ref;
    casper.start();
    ONE_EMAIL = 'playa@uno.es';
    TWO_EMAIL = 'player@two.co.uk';
    THREE_EMAIL = 'plagxo@tri.eo';
    ref = [ONE_EMAIL, TWO_EMAIL, THREE_EMAIL];
    for (i = 0, len = ref.length; i < len; i++) {
      p = ref[i];
      clearGamesForPlayer(p);
    }
    createGame(ONE_EMAIL, TWO_EMAIL);
    createGame(ONE_EMAIL, THREE_EMAIL);
    createGame(THREE_EMAIL, ONE_EMAIL);
    assertNumGames = function(player, players_turn, players_wait) {
      createLoginSession(player);
      return casper.thenOpen(serverUrl, function() {
        var game_counts;
        game_counts = casper.evaluate(function() {
          var counts;
          counts = {
            'your_turn': $('#your_turn_games a').length,
            'not_your_turn': $('#not_your_turn_games a').length
          };
          return counts;
        });
        test.assertEqual(game_counts.your_turn, players_turn, 'Expected number of your-turn games');
        return test.assertEqual(game_counts.not_your_turn, players_wait, 'Expected number of not-your-turn games');
      });
    };
    assertNumGames(ONE_EMAIL, 2, 1);
    assertNumGames(TWO_EMAIL, 0, 1);
    assertNumGames(THREE_EMAIL, 1, 1);
    return casper.then(function() {
      return test.done();
    });
  });

  casper.test.begin("Test Placing Stones", 13, function(test) {
    var ONE_EMAIL, TWO_EMAIL, initialEmptyCount;
    casper.start();
    ONE_EMAIL = 'player@one.com';
    TWO_EMAIL = 'playa@dos.es';
    test.assertPointIsBlack = function(x, y) {
      return test.assertExists(pointSelector(x, y) + ".blackstone", 'There is a black stone at the expected point');
    };
    test.assertPointIsWhite = function(x, y) {
      return test.assertExists(pointSelector(x, y) + ".whitestone", 'There is a white stone at the expected point');
    };
    test.assertPointIsEmpty = function(x, y) {
      return test.assertExists(pointSelector(x, y) + ".nostone", 'The specified point is empty as expected');
    };
    clearGamesForPlayer(ONE_EMAIL);
    clearGamesForPlayer(TWO_EMAIL);
    createGame(ONE_EMAIL, TWO_EMAIL, ['.b.', 'bw.', '.b.']);
    initialEmptyCount = 19 * 19 - 4;
    createLoginSession(ONE_EMAIL);
    casper.thenOpen(serverUrl, function() {
      test.assertExists('#your_turn_games', 'There is a list of your-turn games');
      return test.assertEqual(casper.evaluate(function() {
        return $('#your_turn_games a').length;
      }), 1, 'exactly one game listed');
    });
    casper.thenClick('#your_turn_games li:last-child a', function() {
      test.assertExists('table.goban', 'The Go board does exist.');
      test.assertDoesntExist('.confirm_button:enabled', 'no usable confirm button appears');
      test.assertPointIsEmpty(0, 0);
      test.assertPointIsBlack(1, 0);
      test.assertPointIsEmpty(2, 0);
      test.assertPointIsBlack(0, 1);
      test.assertPointIsWhite(1, 1);
      test.assertPointIsEmpty(2, 1);
      test.assertPointIsEmpty(0, 2);
      test.assertPointIsBlack(1, 2);
      return test.assertPointIsEmpty(2, 2);
    });
    return casper.then(function() {
      return test.done();
    });
  });

  casper.test.begin("Game interface", 35, function(test) {
    var ONE_EMAIL, TWO_EMAIL, countStonesAndPoints, initialEmptyCount;
    casper.start();
    countStonesAndPoints = function() {
      var counts;
      counts = casper.evaluate(function() {
        var blackStones, emptyStones, whiteStones;
        emptyStones = $('.goban .nostone').length;
        blackStones = $('.goban .blackstone').length;
        whiteStones = $('.goban .whitestone').length;
        counts = {
          'empty': emptyStones,
          'black': blackStones,
          'white': whiteStones
        };
        return counts;
      });
      return counts;
    };
    test.assertStonePointCounts = function(nostone, black, white) {
      var counts;
      counts = countStonesAndPoints();
      test.assertEqual(counts.empty, nostone, 'Expected number of empty points');
      test.assertEqual(counts.black, black, 'Expected number of black stones');
      return test.assertEqual(counts.white, white, 'Expected number of white stones');
    };
    test.assertEmptyBoard = function() {
      return test.assertStonePointCounts(19 * 19, 0, 0);
    };
    test.assertPointIsBlack = function(x, y) {
      return test.assertExists(pointSelector(x, y) + ".blackstone", 'There is a black stone at the expected point');
    };
    test.assertPointIsWhite = function(x, y) {
      return test.assertExists(pointSelector(x, y) + ".whitestone", 'There is a white stone at the expected point');
    };
    test.assertPointIsEmpty = function(x, y) {
      return test.assertExists(pointSelector(x, y) + ".nostone", 'The specified point is empty as expected');
    };
    ONE_EMAIL = 'player@one.com';
    TWO_EMAIL = 'playa@dos.es';
    clearGamesForPlayer(ONE_EMAIL);
    clearGamesForPlayer(TWO_EMAIL);
    createGame(ONE_EMAIL, TWO_EMAIL);
    createGame(ONE_EMAIL, TWO_EMAIL, ['wwb', 'b..']);
    initialEmptyCount = 19 * 19 - 4;
    createLoginSession(ONE_EMAIL);
    casper.thenOpen(serverUrl, function() {
      test.assertExists('#your_turn_games', 'There is a list of your-turn games');
      return test.assertEqual(casper.evaluate(function() {
        return $('#your_turn_games a').length;
      }), 2, 'exactly two games listed');
    });
    casper.thenClick('#your_turn_games li:last-child a', function() {
      test.assertExists('table.goban', 'The Go board does exist.');
      test.assertStonePointCounts(initialEmptyCount, 2, 2);
      test.assertTrue(casper.evaluate(function() {
        var result;
        result = false;
        $.ajax($('table.goban img').attr('src'), {
          'async': false,
          'success': function() {
            return result = true;
          }
        });
        return result;
      }), 'an image on the board can be loaded');
      return test.assertDoesntExist('.confirm_button:enabled', 'no usable confirm button appears');
    });
    casper.thenClick(pointSelector(1, 1), function() {
      test.assertStonePointCounts(initialEmptyCount + 1, 3, 0);
      return test.assertExists('.confirm_button:enabled');
    });
    casper.thenClick(pointSelector(15, 3), function() {
      test.assertStonePointCounts(initialEmptyCount - 1, 3, 2);
      test.assertPointIsEmpty(1, 1);
      return test.assertPointIsWhite(1, 0);
    });
    casper.thenClick(pointSelector(1, 1), function() {
      return test.assertStonePointCounts(initialEmptyCount + 1, 3, 0);
    });
    casper.thenClick('.confirm_button', function() {
      return test.assertExists('#your_turn_games', 'There still exists a list of your-turn games');
    });
    createLoginSession(TWO_EMAIL);
    casper.thenOpen(serverUrl, function() {
      return test.assertEqual(casper.evaluate(function() {
        return $('#your_turn_games a').length;
      }), 1, "exactly one game listed in which it's P2's turn");
    });
    casper.thenClick('#your_turn_games a', function() {
      return test.assertStonePointCounts(initialEmptyCount + 1, 3, 0);
    });
    casper.thenClick(pointSelector(1, 1), function() {
      return test.assertStonePointCounts(initialEmptyCount + 1, 3, 0);
    });
    casper.thenClick(pointSelector(3, 3), function() {
      return test.assertStonePointCounts(initialEmptyCount, 3, 1);
    });
    casper.thenClick('.confirm_button');
    casper.thenClick('#not_your_turn_games li:first-child a', function() {
      test.assertExists('.goban', 'The Go board still exists.');
      return test.assertEmptyBoard();
    });
    return casper.then(function() {
      return test.done();
    });
  });

  clearGamesForPlayer = function(email) {
    return casper.thenOpen(serverUrl + "/testing_clear_games_for_player", {
      method: 'post',
      data: {
        'email': email
      }
    });
  };

  createGame = function(black_email, white_email, stones) {
    if (stones == null) {
      stones = [];
    }
    return casper.thenOpen(serverUrl + "/testing_create_game", {
      method: 'post',
      data: {
        'black_email': black_email,
        'white_email': white_email,
        'stones': JSON.stringify(stones)
      }
    });
  };

  createLoginSession = function(email) {
    "Add steps to the stack to create a login session on the server and set its cookie in the browser.";
    casper.thenOpen(serverUrl + "/testing_create_login_session", {
      method: 'post',
      data: {
        'email': email
      }
    });
    return casper.then(function() {
      var content, name, path, ref, value;
      content = casper.getPageContent();
      ref = content.split('\n'), name = ref[0], value = ref[1], path = ref[2];
      casper.page.clearCookies();
      return casper.page.addCookie({
        'name': name,
        'value': value,
        'path': path
      });
    });
  };

  pointSelector = function(x, y) {
    return ".col-" + x + ".row-" + y;
  };

  casper.run(function() {
    casper.log("shutting down...");
    return casper.open('http://localhost:5000/shutdown', {
      method: 'post'
    });
  });

}).call(this);
