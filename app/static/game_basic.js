// Generated by CoffeeScript 1.9.0
(function() {
  var $new_stone, colRe, game_basic, getStoneClass, go_rules, hasCoordClass, hasStoneClass, initial_board_state, new_stone_color, parseCoordClass, read_board_state, rowRe, set_image, tesuji_charm, update_board;

  if (window.tesuji_charm == null) {
    window.tesuji_charm = {};
  }

  tesuji_charm = window.tesuji_charm;

  if (tesuji_charm.game_basic == null) {
    tesuji_charm.game_basic = {};
  }

  game_basic = tesuji_charm.game_basic;

  go_rules = tesuji_charm.go_rules;

  initial_board_state = null;

  $new_stone = null;

  new_stone_color = null;

  set_image = function($td, filename) {
    return $td.find('img').attr('src', "/static/images/goban/" + filename);
  };

  rowRe = /row-(\d+)/;

  colRe = /col-(\d+)/;

  hasCoordClass = function($obj) {
    var classStr;
    classStr = $obj.attr("class");
    return rowRe.test(classStr) && colRe.test(classStr);
  };

  parseCoordClass = function($obj) {
    var classStr, colStr, rowStr, _, _ref, _ref1;
    classStr = $obj.attr("class");
    _ref = rowRe.exec($obj.attr("class")), _ = _ref[0], rowStr = _ref[1];
    _ref1 = colRe.exec($obj.attr("class")), _ = _ref1[0], colStr = _ref1[1];
    return [parseInt(rowStr, 10), parseInt(colStr, 10)];
  };

  hasStoneClass = function($obj) {
    var classStr;
    classStr = $obj.attr("class");
    if (classStr.indexOf('blackstone') > -1) {
      return true;
    }
    if (classStr.indexOf('whitestone') > -1) {
      return true;
    }
    return false;
  };

  getStoneClass = function($obj) {
    var classStr;
    classStr = $obj.attr("class");
    if (classStr.indexOf('blackstone') > -1) {
      return 'blackstone';
    }
    if (classStr.indexOf('whitestone') > -1) {
      return 'whitestone';
    }
    return '';
  };

  read_board_state = function() {
    var result;
    result = [];
    $('.goban td').each(function(index) {
      var col, row, _ref;
      _ref = parseCoordClass($(this)), row = _ref[0], col = _ref[1];
      if (result[row] == null) {
        result[row] = [];
      }
      return result[row][col] = (function() {
        switch (getStoneClass($(this))) {
          case 'blackstone':
            return 'black';
          case 'whitestone':
            return 'white';
          default:
            return 'empty';
        }
      }).call(this);
    });
    return result;
  };

  game_basic._read_board_state = read_board_state;

  update_board = function(state) {
    var $td, col, data, row, rowArray, _results;
    _results = [];
    for (row in state) {
      rowArray = state[row];
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (col in rowArray) {
          data = rowArray[col];
          $td = $(".row-" + row + ".col-" + col);
          _results1.push(set_image($td, (function() {
            switch (data) {
              case 'empty':
                return 'e.gif';
              case 'black':
                return 'b.gif';
              case 'white':
                return 'w.gif';
            }
          })()));
        }
        return _results1;
      })());
    }
    return _results;
  };

  game_basic._update_board = update_board;

  game_basic._reload_board = function() {
    return initial_board_state = read_board_state();
  };

  game_basic.initialize = function() {
    initial_board_state = read_board_state();
    if (parseInt($('input#move_no').val()) % 2 === 0) {
      new_stone_color = 'black';
    } else {
      new_stone_color = 'white';
    }
    $('button.confirm_button').prop('disabled', true);
    return $('table.goban td').click(function() {
      var $old_new_stone, col, new_board_state, row, _ref;
      if (!hasCoordClass($(this))) {
        return;
      }
      _ref = parseCoordClass($(this)), row = _ref[0], col = _ref[1];
      if (!go_rules.is_legal(new_stone_color, col, row, initial_board_state)) {
        return;
      }
      $old_new_stone = $new_stone;
      $new_stone = $(this);
      if ($old_new_stone !== null) {
        set_image($old_new_stone, 'e.gif');
      }
      new_board_state = go_rules.get_new_state(new_stone_color, col, row, initial_board_state);
      update_board(new_board_state);
      $('input#row').val(row.toString());
      $('input#column').val(col.toString());
      return $('button.confirm_button').prop('disabled', false);
    });
  };

}).call(this);
