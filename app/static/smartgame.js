// Generated by CoffeeScript 1.9.0

/*
This file based on https://github.com/neagle/smartgame, which is
released under the license shown below.  Since it's unclear whether
this file counts as a 'copy or substantial portion' of the original,
this file is made available under the same licence instead of the CC0
dedication applied to the larger project.

---

The MIT License (MIT)

Copyright (c) 2014 Nate Eagle

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
 */

(function() {
  var exports, tesuji_charm,
    __hasProp = {}.hasOwnProperty;

  if (window.tesuji_charm == null) {
    window.tesuji_charm = {};
  }

  tesuji_charm = window.tesuji_charm;

  if (tesuji_charm.smartgame == null) {
    tesuji_charm.smartgame = {};
  }

  exports = tesuji_charm.smartgame;

  exports.parse = function(sgf) {
    "Convert SGF files to a JS object @param {string} sgf A valid SGF file @see http://www.red-bean.com/sgf/sgf4.html @return {object} The SGF file represented as a JS object";
    var collection, lastPropIdent, node, parse, parser, sequence;
    parse = null;
    collection = {};
    sequence = null;
    node = null;
    lastPropIdent = null;
    parser = {
      beginSequence: function(sgf) {
        var key, newSequence;
        if (!sequence) {
          sequence = collection;
          key = 'gameTrees';
        } else if (sequence.gameTrees) {
          key = 'gameTrees';
        } else {
          key = 'sequences';
        }
        newSequence = {
          parent: sequence
        };
        sequence[key] || (sequence[key] = []);
        sequence[key].push(newSequence);
        sequence = newSequence;
        return parse(sgf.substring(1));
      },
      endSequence: function(sgf) {
        if (sequence.parent) {
          sequence = sequence.parent;
        } else {
          sequence = null;
        }
        return parse(sgf.substring(1));
      },
      node: function(sgf) {
        node = {};
        sequence.nodes || (sequence.nodes = []);
        sequence.nodes.push(node);
        return parse(sgf.substring(1));
      },
      property: function(sgf) {
        var firstPropEnd, propIdent, propValue, propValueBegin, property;
        firstPropEnd = sgf.search(/[^\\]\]/) + 1;
        if (firstPropEnd > -1) {
          property = sgf.substring(0, firstPropEnd + 1);
          propValueBegin = property.indexOf('[');
          propIdent = property.substring(0, propValueBegin);
          if (!propIdent) {
            propIdent = lastPropIdent;
            if (!Array.isArray(node[propIdent])) {
              node[propIdent] = [node[propIdent]];
            }
          }
          lastPropIdent = propIdent;
          propValue = property.substring(propValueBegin + 1, property.length - 1);
          if (propIdent.length > 2) {
            console.warn("SGF PropIdents should be no longer than two " + ("characters: " + propIdent));
          }
          if (Array.isArray(node[propIdent])) {
            node[propIdent].push(propValue);
          } else {
            node[propIdent] = propValue;
          }
          return parse(sgf.substring(firstPropEnd + 1));
        } else {
          throw new Error('malformed SGF');
        }
      },
      unrecognized: function(sgf) {
        return parse(sgf.substring(1));
      }
    };
    parse = function(sgf) {
      var initial, type;
      initial = sgf.substring(0, 1);
      if (!initial) {
        return collection;
      }
      type = (function() {
        switch (false) {
          case initial !== '(':
            return 'beginSequence';
          case initial !== ')':
            return 'endSequence';
          case initial !== ';':
            return 'node';
          case initial.search(/[A-Z\[]/) === -1:
            return 'property';
          default:
            return 'unrecognized';
        }
      })();
      return parser[type](sgf);
    };
    return parse(sgf);
  };

  exports.generate = function(record) {
    "Generate an SGF string from a SmartGame Record JS object @param {object} record A record object. @return {string} The record as a string suitable for saving as an SGF file";
    var stringifySequences;
    stringifySequences = function(sequences) {
      var contents, node, nodeString, prop, property, sequence, _i, _j, _len, _len1, _ref;
      contents = '';
      for (_i = 0, _len = sequences.length; _i < _len; _i++) {
        sequence = sequences[_i];
        contents += '(';
        if (sequence.nodes) {
          _ref = sequence.nodes;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            node = _ref[_j];
            nodeString = ';';
            for (property in node) {
              if (!__hasProp.call(node, property)) continue;
              prop = node[property];
              if (Array.isArray(prop)) {
                prop = prop.join('][');
              }
              nodeString += property + "[" + prop + "]";
            }
            contents += nodeString;
          }
        }
        if (sequence.sequences) {
          contents += stringifySequences(sequence.sequences);
        }
        contents += ')';
      }
      return contents;
    };
    return stringifySequences(record.gameTrees);
  };

}).call(this);
